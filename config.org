* strange-loop-emacs
** Setup =package.el=
Load =package.el=
#+BEGIN_SRC emacs-lisp
(require 'package)
#+END_SRC
Add common package archives
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
#+END_SRC
Don't load outdated byte code
#+BEGIN_SRC emacs-lisp
  (setq load-prefer-newer t)
#+END_SRC
Ensure that packages aren't loaded again after processing the init file
#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
#+END_SRC
Customize puts a lot of stuff into my =init.el=
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC
** Setup =quelpa=
#+begin_src emacs-lisp
  (unless (package-installed-p 'quelpa)
    (with-temp-buffer
      (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
      (eval-buffer)
      (quelpa-self-upgrade)))
#+end_src

** Configure =use-package=
Install =use-package= if not installed
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC
Load =use-package= while compiling
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
#+END_SRC

Install =quelpa-use-package=
#+begin_src emacs-lisp
  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))
  (require 'quelpa-use-package)
#+end_src

** Tell Emacs who I am
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Anirudh C"
      user-mail-address "anirudh.c@iiitb.ac.in")
#+END_SRC

** Cosmetics
I don't like the default startup area message
#+BEGIN_SRC emacs-lisp
  (defun display-startup-echo-area-message ()
    "My startup message"
    (message "Welcome to Strange Loop Emacs"))
#+END_SRC
I don't like the default alert sound of emacs and would like a mode-line flash
#+begin_src emacs-lisp
  (setq visible-bell nil
        ring-bell-function 'strange-loop/flash-mode-line)

  (defun strange-loop/flash-mode-line ()
    "Flash the modeline; can be used instead of bell"
    (invert-face 'mode-line)
    (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+end_src
*** Theme
I need emacs to look exactly like I want it to, so
start by removing the default startup buffer
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+END_SRC
Also remove the scrollbar, menubar and toolbar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(when (boundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
#+END_SRC
When I use emacs I deal with a lot of parentheses, I want emacs
to match them for me and do it colourfully using =rainbow-delimiters=
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
I also use tabs(size 4) in emacs but I don't want TeX to get confused
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq tab-width 4)
#+END_SRC
I also don't want emacs telling me I'm opening a large file
#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold nil)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
#+END_SRC
I also want emacs to tell me which column I am in the buffer
#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC
I don't like trailing whitespaces as it messes so many things up
#+BEGIN_SRC emacs-lisp
  (defun strange-loop/buf-show-trailing-whitespace ()
    "Show trailing whitespaces in buffer"
    (interactive)
    (setq show-trailing-whitespace t))
  (add-hook 'prog-mode-hook 'strange-loop/buf-show-trailing-whitespace)
#+END_SRC
*** Nano Emacs
Load =nano-dark=
#+begin_src emacs-lisp
  (quelpa '(nano-emacs
            :fetcher github
            :repo "rougier/nano-emacs"))

  (require 'nano-theme-light)
  (require 'nano-theme-dark)

  (require 'nano-faces)
  (nano-faces)

  (require 'nano-theme)
  (nano-theme)

  ;; Nano header & mode lines
  (require 'nano-modeline)

  (set-face-attribute 'mode-line-inactive nil :underline "#434C5E" :foreground "#2E3440")
  (set-face-attribute 'mode-line nil :underline "#434C5E" :foreground "#2E3440")
  (add-hook 'echo-area-clear-hook 'nano-theme--minibuffer)
  (set-face-attribute 'nano-face-strong nil :weight 'medium)
#+end_src
Toggle theme based on time of day
#+begin_src emacs-lisp
  ;; Variable for light theme
  (defvar strange-loop/light t)

  (defun strange-loop/change-theme ()
    "Changes the theme based on the current value of 'strange-loop/light"
    (interactive)
    (progn
      (if strange-loop/light
          (nano-theme-set-light)
        (nano-theme-set-dark))
      (nano-faces)
      (nano-theme)
      (set-face-attribute 'mode-line-inactive nil :underline "#434C5E" :foreground "#2E3440")
      (set-face-attribute 'mode-line nil :underline "#434C5E" :foreground "#2E3440")
      (add-hook 'echo-area-clear-hook 'nano-theme--minibuffer)
      (set-face-attribute 'nano-face-strong nil :weight 'medium)))

  ;; Set the starting theme as light
  (strange-loop/change-theme)

  (defun strange-loop/toggle-theme ()
    "Toggles the theme from light to dark"
    (interactive)
    (setq strange-loop/light (not strange-loop/light))
    (strange-loop/change-theme))

  (defun strange-loop/set-dark ()
    "Helper function to call at night and change the theme to dark"
    (interactive)
    (setq strange-loop/light nil)
    (strange-loop/change-theme))

  (run-at-time "18:00" nil #'strange-loop/set-dark)
#+end_src

** User Interface
Window manager uses Alt as modifier
#+BEGIN_SRC emacs-lisp
(setq x-super-keysym 'meta)
#+END_SRC
Also I need to be able to edit my config in emacs and =restart-emacs=
in emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :ensure t)
#+END_SRC
Make a scratch buffer from thin air
#+BEGIN_SRC emacs-lisp
(defun strange-loop/gen-scratch ()
  "Create and switch to a temporary scratch buffer with a random name."
  (interactive)
  (switch-to-buffer (make-temp-name "scratch-")))
#+END_SRC
Enable buffer narrowing
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-defun 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
#+END_SRC
Renaming files becomes easier
#+BEGIN_SRC emacs-lisp
(defun strange-loop/rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "FNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))
#+END_SRC
Edit a file in sudo on the fly
#+BEGIN_SRC emacs-lisp
  (defun strange-loop/find-file-sudo ()
    "Find file as root if necessary."
    (interactive)
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name)))
#+END_SRC
Undoing and redoing using =undo-tree= only
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode)
    (setq undo-tree-auto-save-history nil))
#+END_SRC
Make redo the redo of undo-tree
#+BEGIN_SRC emacs-lisp
(defalias 'redo 'undo-tree-redo)
#+END_SRC
Capture note with buffer
#+begin_src emacs-lisp
  (defun strange-loop/capture-note ()
    "Org mode generic note-capture in a new buffer"
    (interactive)
    (switch-to-buffer "strange-loop-capture")
    (org-mode))
#+end_src
*** Projects
**** Git
I use git to manage my projects and =magit= provides the interface
and =projectile= is for project specific functionality
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
  (global-set-key (kbd "C-x g") 'magit)
  ;; I need to search for files in a project
  (use-package projectile
    :ensure t
    :config
    (projectile-mode)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-completion-system 'helm))
  (use-package helm-projectile
    :ensure t)
#+END_SRC
I also don't need backup and autosave files because I use git
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil
      auto-save-default nil)
#+END_SRC
*** Completion
Use =helm= for narrow list compression
#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :init
    (progn
      (require 'helm-config)
      (setq helm-candidate-number-limit 100)
      ;; From https://gist.github.com/antifuchs/9238468
      (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
            helm-input-idle-delay 0.01  ; this actually updates things
                                          ; reeeelatively quickly.
            helm-yas-display-key-on-candidate t
            helm-quick-update t
            helm-M-x-requires-pattern nil
            helm-ff-skip-boring-files t)
      (helm-mode))
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x b" . helm-mini)
           ("C-x c o" . helm-occur)
           ("M-y" . helm-show-kill-ring)
           ("C-x r b" . helm-filtered-bookmarks))
    :config
    (setq helm-buffers-fuzzy-matching t)
    (setq helm-autoresize-mode t)
    (setq helm-buffer-max-length 40)
    (setq helm-split-window-in-side-p nil))
#+end_src
Setup =swiper= for search
#+begin_src emacs-lisp
  (use-package swiper-helm
    :ensure t
    :config
    (setq swiper-helm-display-function 'helm-default-display-buffer)
    (global-set-key (kbd "C-s") 'swiper-helm))
#+end_src
Ensure fuzzy search happens using =flx=
#+BEGIN_SRC emacs-lisp
  (use-package helm-flx
    :ensure t
    :config (helm-flx-mode 1))
#+END_SRC

*** File Management
Use =neotree=
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (require 'neotree)
    (global-set-key (kbd "C-S-n") 'neotree-toggle)
    (setq neo-theme 'nerd))
#+END_SRC

*** Multiple Cursors
Use =multiple-cursors= behaviour
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC

*** Window Management
Use =ace-window= to manage windows
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (global-set-key (kbd "M-o") 'ace-window)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-background nil))
#+END_SRC

*** Which Key
Good to know what I'm pressing
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src
Which key in a posframe
#+begin_src emacs-lisp
  (use-package which-key-posframe
    :ensure t
    :config
    (which-key-posframe-mode))
#+end_src

** Environments
*** Markdown
Highlighting using =markdown-mode=
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  ;; Tell emacs to use different modes for different types of markdown files,
  ;; that is, use github flavoured markdown for my READMEs and normal markdown everywhere else.
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

*** PDF
Install and configure =pdf-tools=
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-width))
#+END_SRC
Allow scrolling the PDF side-by-side with source code
#+begin_src emacs-lisp
  (defun strange-loop/pdfview-scroll-down ()
    "Scroll pdf-view buffer down as other window."
    (interactive)
    (other-window 1)
    (pdf-view-scroll-down-or-previous-page)
    (other-window 1))

  (defun strange-loop/pdfview-scroll-up ()
    "Scroll pdf-view buffer up as other window."
    (interactive)
    (other-window 1)
    (pdf-view-scroll-up-or-next-page)
    (other-window 1))

  (global-set-key (kbd "C-M-n") 'strange-loop/pdfview-scroll-up)
  (global-set-key (kbd "C-M-p") 'strange-loop/pdfview-scroll-down)
#+end_src
*** Latex
Install =auctex=
#+begin_src emacs-lisp
  (use-package auctex
    :ensure t
    :defer t)
  (with-eval-after-load "latex"
    (progn
      (add-to-list
       'TeX-command-list
       '("Docker compile"
         "docker run --rm -i -u $(id -u):$(id -g) -v \"$PWD\":/usr/src/app -w /usr/src/app texlive/texlive latexmk -pdf %s"
         TeX-run-command
         nil
         t
         :help "Compile latex using Docker"
         ))
      (add-to-list
       'TeX-command-list
       '("Make compile"
         "make all"
         TeX-run-command
         nil
         t
         :help "Compile latex using Makefile"
         ))
      (setq TeX-command-default "Docker compile")))


#+end_src
*** Python
Install =elpy=
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable)
    (setq elpy-rpc-python-command "python3.7"))
#+END_SRC
Line numbers in python files
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'linum-mode)
#+end_src
*** Annotated Bibliography
Install pre-requisites for =bibliography-mode=
#+begin_src emacs-lisp
  (use-package org-inline-pdf
    :ensure t
    :config
    (add-hook 'org-mode-hook #'org-inline-pdf-mode))
#+end_src
Load up custom =bibliography-mode= and set path
#+begin_src emacs-lisp
  (quelpa '(bibliography
            :fetcher github
            :repo "anirudh-c/bibliography-mode"))
  (require 'bibliography)
  (setq bibliography-path "~/org/papers.org")
#+end_src
I want to open my /annotated bibliography/ using =C-c b o=
#+begin_src emacs-lisp
  (defun strange-loop/open-bib ()
    "Open the annotated bibliography."
    (interactive)
    (find-file bibliography-path)
    (bibliography-mode t)
    (end-of-buffer))
  (global-set-key (kbd "C-c b o") 'strange-loop/open-bib)
#+end_src
*** RSS
Use =elfeed=
#+begin_src emacs-lisp
  (defun concatenate-authors (authors-list)
    "Given AUTHORS-LIST, list of plists; return string of all authors
  concatenated."
    (mapconcat
     (lambda (author) (plist-get author :name))
     authors-list ", "))

  (defun my-search-print-fn (entry)
    "Print ENTRY to the buffer."
    (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
           (title (or (elfeed-meta entry :title)
                      (elfeed-entry-title entry) ""))
           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
           (feed (elfeed-entry-feed entry))
           (feed-title
            (when feed
              (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
           (entry-authors (concatenate-authors
                           (elfeed-meta entry :authors)))
           (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
           (tags-str (mapconcat
                      (lambda (s) (propertize s 'face
                                              'elfeed-search-tag-face))
                      tags ","))
           (title-width (- (window-width) 10
                           elfeed-search-trailing-width))
           (title-column (elfeed-format-column
                          title (elfeed-clamp
                                 elfeed-search-title-min-width
                                 title-width
                                 elfeed-search-title-max-width)
                          :left))
           (authors-width 135)
           (authors-column (elfeed-format-column
                            entry-authors (elfeed-clamp
                                           elfeed-search-title-min-width
                                           authors-width
                                           80)
                            :left)))

      (insert (propertize date 'face 'elfeed-search-date-face) " ")

      (insert (propertize title-column
                          'face title-faces 'kbd-help title) " ")

      (insert (propertize authors-column
                          'face 'elfeed-search-date-face
                          'kbd-help entry-authors) " ")

      ;; (when feed-title
        ;; (insert (propertize entry-authors
                            ;; 'face 'elfeed-search-feed-face) " "))
      ;; (when entry-authors
      ;;   (insert (propertize feed-title
      ;;                       'face 'elfeed-search-feed-face) " "))
      (when tags
        (insert "(" tags-str ")"))))

  (use-package elfeed
    :ensure t
    :config
    (global-set-key (kbd "C-x w") 'elfeed)
    (setq elfeed-feeds
          '("http://eprint.iacr.org/rss/rss.xml"))
    (setq-default elfeed-search-filter "@1-week-ago")
    (setq elfeed-search-print-entry-function #'my-search-print-fn))

  (use-package elfeed-score
    :ensure t
    :config
    (progn
      (elfeed-score-enable)
      (define-key elfeed-search-mode-map "=" elfeed-score-map)))
#+end_src

** Org Mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :pin gnu)
#+END_SRC
*** Display
How I want org-mode to look
#+BEGIN_SRC emacs-lisp
  ;; Tell emacs to start org mode in all .org files
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  ;; Hide the leading stars and start org mode with indented structure
  (setq org-hide-leading-stars t
        org-startup-indented t
        org-startup-folded t)
  ;; Use the nice down arrow to display folded content in org headlines
  (setq org-ellipsis "⤵")
#+END_SRC
=org-bullets= need to look good
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
The emphasis markers in org mode aren't the *best*
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC
I want alphabetical lists as well
#+begin_src emacs-lisp
  (setq org-list-allow-alphabetical t)
#+end_src
I want spellcheck in org mode
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            #'(lambda () (flyspell-mode 1)))
#+end_src
British English is better
#+begin_src emacs-lisp
  (setq ispell-dictionary "british")
#+end_src
Inline images must not be transparent in dark mode
#+begin_src emacs-lisp
  (defun org--create-inline-image-advice (img)
    (nconc img (list :background "#ffffff")))

  (advice-add 'org--create-inline-image
              :filter-return #'org--create-inline-image-advice)
#+end_src
*** Tasks and Org-Capture
**** Basic Setup
I have all my org files in a directory =~/org/= and I also have an index file which has all my TODOs in an outline and
I also have an archive file to archive my completed TODOs.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
#+END_SRC
I need a helper function to point to my orgfiles' absolute path using the relative path
#+BEGIN_SRC emacs-lisp
(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
#+END_SRC
Now I can set my index file location
#+BEGIN_SRC emacs-lisp
(setq org-index-file (org-file-path "index.org"))
#+END_SRC
I can also setup my archive file
#+BEGIN_SRC emacs-lisp
(setq org-archive-location
      (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC
I also setup a journal file
#+begin_src emacs-lisp
  (setq org-journal-file
        (concat (file-name-as-directory "~/org/journals") "journal.org"))
#+end_src
I need org-agenda to tell me my TODOs and also search my annotated bibliography
#+BEGIN_SRC emacs-lisp
  (setq strange-loop/org-agenda-files (list org-index-file bibliography-path))
  (setq org-agenda-files strange-loop/org-agenda-files)
#+END_SRC
I want to archive my TODOs into =archive.org= when I finish them
#+BEGIN_SRC emacs-lisp
(defun done-and-dusted ()
  "Mark the state of an org-mode item as DONE and archive it."
  (interactive)
  (org-todo 'done)
  (org-archive-subtree))
#+END_SRC
I want to know when I did these tasks as well
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC
**** Capture Templates
- Todo template
  #+BEGIN_SRC emacs-lisp
    (setq org-capture-templates '(("t" "Todo"
                                          entry
                                          (file org-index-file)
                                          "* TODO %^{Todo} %^G \nSCHEDULED: %^{Schedule}T DEADLINE: %^{Deadline}T \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%?")))
  #+END_SRC
- Journal template
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'org-capture-templates '("j" "Journal Entry"
                                          entry
                                          (file+olp+datetree org-journal-file)
                                          "** %U %^{Title}\n%?"))
  #+END_SRC
Set org-refile-targets to the agenda files
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
#+END_SRC
**** Keybindings
Some basic keybindings
#+BEGIN_SRC emacs-lisp
  (defun strange-loop/daily-agenda (&optional split)
    "Visit the daily org agenda, in the current window or a SPLIT."
    (interactive "P")
    (org-agenda nil "d")
    (when (not split)
      (delete-other-windows)))
  (defun strange-loop/monthly-agenda (&optional split)
    "Visit the monthly org agenda, in the current window or a SPLIT."
    (interactive "P")
    (org-agenda nil "M")
    (when (not split)
      (delete-other-windows)))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cd" 'strange-loop/daily-agenda)
  (define-key global-map "\C-cM" 'strange-loop/monthly-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC
Hitting =C-c C-x C-s= should mark my todo as done and move it to =archive.org=
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "C-c C-x C-s") 'done-and-dusted)
#+END_SRC
I want to open my index file using =C-c i=
#+BEGIN_SRC emacs-lisp
(defun strange-loop/open-index ()
  "Open the master org TODO list."
  (interactive)
  (find-file org-index-file)
  (end-of-buffer))
(global-set-key (kbd "C-c i") 'strange-loop/open-index)
#+END_SRC
I want to open my journal using =C-c j= and switch using =C-x j=
#+BEGIN_SRC emacs-lisp
  (defun strange-loop/open-journal ()
    "Output the journal"
    (interactive)
    (find-file "~/org/journals/journal.org"))
  (global-set-key (kbd "C-c j") 'strange-loop/open-journal)
#+END_SRC

*** Org Agenda
Filter =A= priority items from the complete TODO list
#+begin_src emacs-lisp
  (defun strange-loop/skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  (defun strange-loop/org-agenda-skip-tag (tag &optional others)
    "Skip all entries that correspond to TAG.
  If OTHERS is true, skip all entries that do not correspond to TAG."
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (current-headline (or (and (org-at-heading-p)
                                     (point))
                                (save-excursion (org-back-to-heading)))))
      (if others
          (if (not (member tag (org-get-tags-at current-headline)))
              next-headline
            nil)
        (if (member tag (org-get-tags-at current-headline))
            next-headline
          nil))))
#+end_src
Custom agenda view
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("d" "Daily agenda and all TODOs"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (tags "coursework"
                  ((org-agenda-overriding-header "Course Related Items")))
            (agenda "" ((org-agenda-span 1)))
            (alltodo ""
                     ((org-agenda-skip-function '(strange-loop/skip-subtree-if-priority ?A))
                      (org-agenda-overriding-header "All normal priority tasks:")))))
          ("M" "Monthly agenda and all TODOs"
           ((agenda "" ((org-agenda-overriding-header "Monthly Review")
                        (org-agenda-start-day "+1d")
                        (org-agenda-span 'month)
                        (org-agenda-entry-types '(:deadline))
                        (org-agenda-time-grid nil)
                        (org-agenda-show-all-dates nil)
                        (org-agenda-skip-function '(strange-loop/org-agenda-skip-tag "repeat" 'nil))))))))
#+end_src
We want sticky agendas
#+begin_src emacs-lisp
  (setq org-agenda-sticky t)
#+end_src
*** Export
Allow =babel= to evaluate emacs lisp, python, C, C++, OCaml and gnuplot code
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (C . t)
       (ocaml . t)
       (gnuplot . t))))
#+END_SRC
Make =babel= evaluate code blocks without confirmation
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC
Open the exported HTML files in eww
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'eww-browse-url)
#+END_SRC
Org Beamer export
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (require 'ox-beamer))
#+END_SRC
Get easy templates back
#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist '(("a" . "abstract")
                                       ("c" . "center")
                                       ("C" . "comment")
                                       ("e" . "example")
                                       ("E" . "export")
                                       ("h" . "export html")
                                       ("l" . "export latex")
                                       ("q" . "quote")
                                       ("s" . "src")
                                       ("v" . "verse")))

  (require 'org-tempo)
#+END_SRC
Use docker to run latex export
#+begin_src emacs-lisp
  (setq org-latex-pdf-process
        '("docker run --rm -i -u $(id -u):$(id -g) -v \"$PWD\":/usr/src/app -w /usr/src/app texlive/texlive latexmk -pdf %b"))
#+end_src
Custom cite links
#+begin_src emacs-lisp
  (org-link-set-parameters
   "citep"
   :export (lambda (path desc format)
             (cond
              ((eq format 'latex)
               (if (or (not desc) (equal 0 (search "citep:" desc)))
                   (format "\\citep{%s}" path)
                 (format "\\citep[%s]{%s}" desc path))))))

  (org-link-set-parameters
   "citet"
   :export (lambda (path desc format)
             (cond
              ((eq format 'latex)
               (if (or (not desc) (equal 0 (search "citet:" desc)))
                   (format "\\citet{%s}" path)
                 (format "\\citet[%s]{%s}" desc path))))))

  (org-link-set-parameters
   "citealt"
   :export (lambda (path desc format)
             (cond
              ((eq format 'latex)
               (if (or (not desc) (equal 0 (search "citealt:" desc)))
                   (format "\\citealt{%s}" path)
                 (format "\\citealt[%s]{%s}" desc path))))))

  (org-link-set-parameters
   "citealp"
   :export (lambda (path desc format)
             (cond
              ((eq format 'latex)
               (if (or (not desc) (equal 0 (search "citealp:" desc)))
                   (format "\\citealp{%s}" path)
                 (format "\\citealp[%s]{%s}" desc path))))))

  (org-link-set-parameters
   "citealt*"
   :export (lambda (path desc format)
             (cond
              ((eq format 'latex)
               (if (or (not desc) (equal 0 (search "citealt*:" desc)))
                   (format "\\citealt*{%s}" path)
                 (format "\\citealt*[%s]{%s}" desc path))))))

  (org-link-set-parameters
   "citealp*"
   :export (lambda (path desc format)
             (cond
              ((eq format 'latex)
               (if (or (not desc) (equal 0 (search "citealp*:" desc)))
                   (format "\\citealp*{%s}" path)
                 (format "\\citealp*[%s]{%s}" desc path))))))

  (org-link-set-parameters
   "citep*"
   :export (lambda (path desc format)
             (cond
              ((eq format 'latex)
               (if (or (not desc) (equal 0 (search "citep*:" desc)))
                   (format "\\citep*{%s}" path)
                 (format "\\citep*[%s]{%s}" desc path))))))

  (org-link-set-parameters
   "citet*"
   :export (lambda (path desc format)
             (cond
              ((eq format 'latex)
               (if (or (not desc) (equal 0 (search "citet*:" desc)))
                   (format "\\citet*{%s}" path)
                 (format "\\citet*[%s]{%s}" desc path))))))
#+end_src
*** Help
I have a file on my orgfiles which is a document on the keybindings in org. I want to open it quickly.
#+BEGIN_SRC emacs-lisp
(defun strange-loop/open-org-help ()
  "Open my org mode help file"
  (interactive)
  (find-file "~/org/org-cheat-sheet.org")
  (end-of-buffer))
(global-set-key (kbd "C-c h") 'strange-loop/open-org-help)
#+END_SRC
** Completion
I use =company= for an inline completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :defer t
  :init
  (global-company-mode)
  :config
  (setq company-idle-delay 0.4)
  (setq company-selection-wrap-around t)
  (define-key company-active-map (kbd "jk") 'company-abort)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC

** Config Sugar
Make all prompts y or n instead of yes or no
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
Open my config quickly
#+BEGIN_SRC emacs-lisp
(defun strange-loop/open-config ()
  "Open the config file"
  (interactive)
  (find-file "~/.emacs.d/config.org")
  (end-of-buffer))
(global-set-key (kbd "C-c e") 'strange-loop/open-config)
#+END_SRC
Refresh the configuration inplace without restarting emacs
#+BEGIN_SRC emacs-lisp
  (defun strange-loop/reload-config ()
    "Reload config on the fly without restarting emacs"
    (interactive)
    (load-file "~/.emacs.d/init.el")
    (message "Reloaded Config"))
  (global-set-key (kbd "C-c f") 'strange-loop/reload-config)
#+END_SRC
